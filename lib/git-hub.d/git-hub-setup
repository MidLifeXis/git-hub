#!/usr/bin/env bash

set -e

command:setup() {
  setup:intro
  setup:login
  setup:api-token
  setup:use-auth
  setup:json-perl
  setup:outro
  exit 0
}

center() {
  local line="$@"
  printf "%*s\n" $(( (${#line} + 80) / 2)) "$line"
}

setup:intro() {
  clear
  cat <<...

`center "The 'git hub' Setup Tool"`

This dialog will walk you through the steps involved in creating or updating
the configuration needed by the 'git hub' command. It should only take a
minute.

Your config will be stored here: '$GIT_HUB_CONFIG'.

...
  prompt
  mkdir -m 700 -p "$GIT_HUB_USER_DIR"
}

setup:login() {
  clear
  cat <<...

`center "Step #1 - Login ID"`

The 'git hub' command needs to know your GitHub login id.

...
  read-config-value login && login="$value" || login=
  if [[ -n $login ]]; then
    echo "Your login is currently set to '$login'".
    echo
    a="$(prompt "Do you want to keep this value? [Yn] ")"
    [[ $a == y ]] && return
  fi

  while true; do
    echo
    login="$(prompt "Enter your GitHub login id: ")"
    [[ $login =~ ^[-a-zA-Z0-9]+$ ]] && break
    echo "Invalid login value '$login'"
  done

  write-config-value login "$login" ||
    die "Can't write-config-value login $login"

  cat <<...

Login changed to '$login'.

...
  prompt
}

setup:api-token() {
  clear
  cat <<...

`center "Step #2 - API Token"`

More advanced commands require an authentication token (with the appropriate
scopes added).
...
  read-config-value api-token && token="$value" || token=
  if [[ -n $token ]]; then
    cat <<...

It seems that you already have a token. To see your token, run these commands:

    git hub config api-token
    git hub token-list

Verify that this is the correct token, If not, we will generate a new token
for you and put it in the config file.

...
    a="$(prompt "Is this the correct token? [Yn] ")"
    [[ $a == y ]] && return
  fi
  cat <<...

To generate a new token, the commands require your GitHub password. If 2FA
(two-factor authentication) is enabled for your GitHub account, you will also
be prompted for a 2FA code.

The password will not be stored after the commands finish running.
...
  export GIT_HUB_PASSWORD="$(
    prompt "Enter your GitHub password (for '$login'): "
  )"
  echo
  echo
  echo 'Generating a new authentication token...'

  local rc=0 token= desc="API Token for git-hub ($(date "+%s"))"

  token="$(git hub token-new -qr "$desc" | tail -1)" || rc=$?
  [[ -n $token ]] || die "Command failed"
  echo "Token successfully generated."
  echo "Adding the new token to your config file..."
  write-config-value api-token $token ||
    die "Can't write-config-value api-token $token"
  echo "Token successfully added to config file."
  echo
  prompt
  unset GIT_HUB_PASSWORD
  unset GIT_HUB_2FA_OTP
}

setup:use-auth() {
  local auth
  read-config-value use-auth && auth="$value" || auth=true
  write-config-value use-auth "$auth" ||
    die "Can't write-config-value use-auth $auth"
}

setup:json-perl() {
  clear

  local perl="$(perl -e 'print "OK"' 2> /dev/null)"
  local perl_json_pp="$(perl -MJSON::PP -e 'print "OK"' 2> /dev/null)"
  local perl_json="$(perl -MJSON -e 'print "OK"' 2> /dev/null)"
  local perl_json_maybexs="$(
    perl -MJSON::MaybeXS -e 'print "OK"' 2> /dev/null
  )"
  read-config-value json-lib && set="$value" || set=
  local a=

  cat <<...

`center "Step #3 - Faster JSON"`

The 'git-hub' command is written entirely in Bash. The Bash JSON utility it
uses can be slow.

There is a setting to use Perl to handle the JSON which is much faster. It
requires Perl and the JSON::MaybeXS modules for Perl.

...
  if [[ -n $set ]]; then
    cat <<...
You already have this option set to '$set'.

...
    a="$(prompt "Do you want to keep this value? [Yn] ")"

    if [[ $a == y ]]; then
      return
    else
      delete-config-value json-lib ||
        die "Can't delete-config-value json-lib"
    fi
  fi
  if [[ $perl == OK ]]; then
    if [[ $perl_json_pp == OK ]] ||
       [[ $perl_json == OK ]] ||
       [[ $perl_json_maybexs == OK ]]
    then
      cat <<...
You seem to have the prerequisites to speed up your 'git-hub' experience.

...
      a="$(prompt "Would you like to turn this setting on? [Yn] ")"
      if [[ $a == y ]]; then
        write-config-value json-lib json-perl.bash ||
          die "Can't write-config-value json-lib json-perl.bash"
      else
        delete-config-value json-lib ||
          die "Can't delete-config-value json-lib"
      fi
    else
      cat <<...
You seem to have Perl, but none of the 'JSON::MaybeXS', 'JSON' or 'JSON::PP'
modules, so we can't use the setting at this time.

Try installing the JSON::MaybeXS module from CPAN and then run 'git hub setup'
again.

...
      prompt
    fi
  else
    cat <<...
Perl seems to not be installed on your system, so we can't use the setting at
this time.

If you want to use this speedup in the future, try installing Perl and the
JSON::MaybeXS module from CPAN and then run 'git hub setup' again.

...
    prompt
  fi
}

setup:outro() {
  clear
  cat <<'...'

                        Setup Complete

The setup process is now complete!

To see your new config, run this command:

    git hub config

You should now be able to run almost all 'git hub' commands.

For more advanced configuration commands, see the complete documentation:

    git help hub

Enjoy GitHubbing from the command line!

...
}
