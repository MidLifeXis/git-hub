#!/usr/bin/env bash

set -e

command:tokens() {
  basic-auth
  report-list \
    '/authorizations' \
    'token id note app/name'
}

format-entry:tokens() {
  if "$raw_output" || "$quiet_output"; then
    printf "%-7s\t%s\n" "$3" "${4:-$5}"
  else
    printf "%d) %s %-14s  %s\n" "$1" "$2" "(id: $3)" "${4:-$5}"
  fi
}

command:token-new() {
  get-args '?note'
  local json
  local scopes='"scopes":["user","repo","gist"]'
  if [[ -n $note ]]; then
    json-escape "$note" escaped_note
    json="{$scopes,"'"note":"'"$escaped_note"'"}'
  else
    json="{$scopes}"
  fi
  echo $json
  basic-auth
  api-post '/authorizations' "$json"
}

ok:token-new() {
  local token="$(JSON.get -s "/token" -)"
  [[ -n $token ]] || error "can't figure out token value"
  local id="$(JSON.get -n "/id" -)"
  local note="$(JSON.get -s "/note" -)"
  local name="$(JSON.get "/app/name" -)"
  if "$raw_output" || "$quiet_output"; then
    out "$token"
  else
    printf "Token created: %s %-14s  %s\n" \
      "$token" "(id: $id)" "${note:-$name}"
  fi
}

status-401:token-new() {
  if [[ -z $GIT_HUB_2FA_OTP ]]; then
    if [[ -n $(grep "X-GitHub-OTP: required;" "$command_header_file") ]]; then
      export GIT_HUB_2FA_OTP="$(
        prompt "Enter your 2-Factor-Auth code: "
      )"
    else
      echo "Invalid password."
    fi
  else
    echo "Invalid code."
    export GIT_HUB_2FA_OTP="$(
      prompt "Enter your 2-Factor-Auth code: "
    )"
  fi
  run-command token-new "${command_arguments[@]}"
}

command:token-get() {
  get-args token_id key
  basic-auth
  api-get "/authorizations/$token_id"
  OK || {
    msg_fail="Can't get token info for token-id=$token_id"
    return
  }
  local value="$(JSON.get -a "/$key" -)"
  if [[ -n $value ]]; then
    msg_ok="$value"
  else
    msg_fail="Couldn't get value for '$key'"
    OK=1
  fi
}

command:token-delete() {
  get-args token_id
  basic-auth
  api-delete "/authorizations/$token_id"
  msg_ok="Token '$token_id' deleted"
}

# vim: set lisp:
